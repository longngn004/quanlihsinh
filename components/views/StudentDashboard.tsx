import React, { useState, useMemo } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { Emotion, Student } from '../../types';
import { QUOTES } from '../../constants';
import Card, { CardTitle, CardContent } from '../ui/Card';

type StudentView = 'home' | 'checkin' | 'checkin-note' | 'checkin-complete' | 'anonymous-note' | 'note-complete' | 'support' | 'support-complete';

const QuoteCard: React.FC = () => {
    const quote = useMemo(() => QUOTES[Math.floor(Math.random() * QUOTES.length)], []);
    const parts = quote.replace(/"/g, '').split(' - ');
    const quoteText = parts.slice(0, -1).join(' - ');
    const author = parts[parts.length - 1];

    return (
        <Card className="bg-white/80 backdrop-blur-sm border-primary-200">
            <CardContent>
                <blockquote className="text-center">
                    <p className="text-lg italic text-primary-800">"{quoteText}"</p>
                    <footer className="mt-2 text-sm text-primary-600 font-semibold">- {author}</footer>
                </blockquote>
            </CardContent>
        </Card>
    );
}

const NavigationCard: React.FC<{ title: string, description: string, icon: React.ReactNode, onClick: () => void, color: string }> = ({ title, description, icon, onClick, color }) => (
    <button onClick={onClick} className={`text-left p-6 rounded-2xl shadow-lg hover:shadow-xl hover:-translate-y-1 transition-all transform ${color}`}>
        <div className="flex items-center space-x-4">
            <div className="w-12 h-12">{icon}</div>
            <div>
                <h3 className="text-xl font-bold text-white">{title}</h3>
                <p className="text-white/90 text-sm">{description}</p>
            </div>
        </div>
    </button>
);

const StudentDashboard: React.FC = () => {
  const { user, logout } = useAuth();
  const student = user as Student;
  const [view, setView] = useState<StudentView>('home');
  const [selectedEmotion, setSelectedEmotion] = useState<Emotion | null>(null);
  const [note, setNote] = useState('');

  const resetState = () => {
      setSelectedEmotion(null);
      setNote('');
  }

  const handleEmotionSelect = (emotion: Emotion) => {
    setSelectedEmotion(emotion);
    setView('checkin-note');
  };

  const handleBackToHome = () => {
      resetState();
      setView('home');
  }

  const renderContent = () => {
      switch(view) {
        case 'home':
            return (
                <div className="space-y-8">
                    <QuoteCard />
                    <div className="grid grid-cols-1 gap-6">
                        <NavigationCard title="ƒêi·ªÉm danh h√¥m nay" description="H√£y cho ch√∫ng t√¥i bi·∫øt c·∫£m x√∫c c·ªßa em" icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-full w-full text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>} onClick={() => setView('checkin')} color="bg-gradient-to-br from-blue-500 to-indigo-600" />
                        <NavigationCard title="G·ª≠i ghi ch√∫ ·∫©n danh" description="Chia s·∫ª t√¢m s·ª± m·ªôt c√°ch ri√™ng t∆∞" icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-full w-full text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" /></svg>} onClick={() => setView('anonymous-note')} color="bg-gradient-to-br from-purple-500 to-pink-600" />
                        <NavigationCard title="C·∫ßn h·ªó tr·ª£ kh·∫©n c·∫•p" description="Li√™n h·ªá gi√°o vi√™n t√¢m l√Ω ngay" icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-full w-full text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}><path strokeLinecap="round" strokeLinejoin="round" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192l-3.536 3.536M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>} onClick={() => setView('support')} color="bg-gradient-to-br from-red-500 to-orange-600" />
                    </div>
                </div>
            )
        case 'checkin':
            return (
                <Card>
                    <CardTitle>H√¥m nay em c·∫£m th·∫•y th·∫ø n√†o?</CardTitle>
                    <CardContent className="mt-4">
                        <div className="grid grid-cols-3 gap-4">
                            <button onClick={() => handleEmotionSelect(Emotion.Happy)} className="text-center p-4 border-2 border-transparent rounded-lg hover:bg-green-100 hover:border-green-400 transition-all">
                                <span className="text-6xl">üòä</span>
                                <p className="mt-2 font-semibold text-green-700">{Emotion.Happy}</p>
                            </button>
                             <button onClick={() => handleEmotionSelect(Emotion.Tired)} className="text-center p-4 border-2 border-transparent rounded-lg hover:bg-yellow-100 hover:border-yellow-400 transition-all">
                                <span className="text-6xl">üò¥</span>
                                <p className="mt-2 font-semibold text-yellow-700">{Emotion.Tired}</p>
                            </button>
                             <button onClick={() => handleEmotionSelect(Emotion.Sad)} className="text-center p-4 border-2 border-transparent rounded-lg hover:bg-red-100 hover:border-red-400 transition-all">
                                <span className="text-6xl">üòî</span>
                                <p className="mt-2 font-semibold text-red-700">{Emotion.Sad}</p>
                            </button>
                        </div>
                        <button onClick={handleBackToHome} className="w-full mt-6 text-sm text-gray-600 hover:text-gray-900">Quay l·∫°i</button>
                    </CardContent>
                </Card>
            )
        case 'checkin-note':
        case 'anonymous-note':
            const isCheckin = view === 'checkin-note';
            return (
                <Card>
                    <CardTitle>{isCheckin ? 'Ho√†n t·∫•t ƒëi·ªÉm danh' : 'G·ª≠i ghi ch√∫ ·∫©n danh'}</CardTitle>
                    <CardContent className="mt-4">
                        {isCheckin && (
                             <div className="flex items-center justify-center mb-4">
                                <p className="mr-4">C·∫£m x√∫c c·ªßa em h√¥m nay l√†:</p>
                                <span className="text-4xl">{selectedEmotion === Emotion.Happy ? 'üòä' : selectedEmotion === Emotion.Tired ? 'üò¥' : 'üòî'}</span>
                                <span className="ml-2 font-bold text-lg">{selectedEmotion}</span>
                            </div>
                        )}
                        <textarea
                            value={note}
                            onChange={(e) => setNote(e.target.value)}
                            className="w-full h-28 p-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                            placeholder={isCheckin ? "N·∫øu mu·ªën, em c√≥ th·ªÉ chia s·∫ª th√™m ƒë√¥i ƒëi·ªÅu ·ªü ƒë√¢y... (kh√¥ng b·∫Øt bu·ªôc)" : "H√£y chia s·∫ª ƒëi·ªÅu em ƒëang suy nghƒ©. M·ªçi th√¥ng tin ƒë·ªÅu ƒë∆∞·ª£c gi·ªØ b√≠ m·∫≠t."}
                        ></textarea>
                        <button
                            onClick={() => setView(isCheckin ? 'checkin-complete' : 'note-complete')}
                            className="w-full mt-4 bg-primary-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-primary-700 transition-colors"
                        >
                           {isCheckin ? 'Ho√†n t·∫•t' : 'G·ª≠i ƒëi'}
                        </button>
                         <button onClick={handleBackToHome} className="w-full mt-2 text-sm text-gray-600 hover:text-gray-900">H·ªßy</button>
                    </CardContent>
                </Card>
            )
        case 'support':
             return (
                <Card className="border-danger-200 bg-danger-50">
                     <CardTitle>H·ªó tr·ª£ kh·∫©n c·∫•p</CardTitle>
                     <CardContent className="mt-4">
                        <p className="text-sm text-danger-800 mb-4">N·∫øu em ƒëang g·∫∑p kh√≥ khƒÉn v√† c·∫ßn n√≥i chuy·ªán v·ªõi gi√°o vi√™n t√¢m l√Ω ngay, h√£y b·∫•m n√∫t b√™n d∆∞·ªõi. Y√™u c·∫ßu c·ªßa em s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒëi m·ªôt c√°ch b·∫£o m·∫≠t.</p>
                         <button
                            onClick={() => setView('support-complete')}
                            className="w-full bg-danger-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-danger-700 transition-colors"
                        >
                            C·∫ßn tham v·∫•n t√¢m l√Ω
                        </button>
                        <button onClick={handleBackToHome} className="w-full mt-2 text-sm text-gray-600 hover:text-gray-900">Quay l·∫°i</button>
                     </CardContent>
                </Card>
             )
        case 'checkin-complete':
        case 'note-complete':
        case 'support-complete':
            const messages = {
                'checkin-complete': { title: "ƒêi·ªÉm danh th√†nh c√¥ng!", text: "C·∫£m ∆°n em ƒë√£ chia s·∫ª. Ch√∫c em m·ªôt ng√†y h·ªçc t·∫≠p t·ªët l√†nh!" },
                'note-complete': { title: "ƒê√£ g·ª≠i ghi ch√∫!", text: "C·∫£m ∆°n em ƒë√£ tin t∆∞·ªüng v√† chia s·∫ª. Gi√°o vi√™n t√¢m l√Ω s·∫Ω xem x√©t ghi ch√∫ c·ªßa em." },
                'support-complete': { title: "ƒê√£ g·ª≠i y√™u c·∫ßu!", text: "Y√™u c·∫ßu c·ªßa em ƒë√£ ƒë∆∞·ª£c g·ª≠i. Gi√°o vi√™n t√¢m l√Ω s·∫Ω li√™n h·ªá v·ªõi em s·ªõm nh·∫•t c√≥ th·ªÉ." }
            }
            const { title, text } = messages[view];
            return (
                <Card>
                    <CardContent>
                        <div className="text-center p-8 bg-success-50 rounded-lg">
                            <h3 className="text-xl font-bold text-success-800">{title}</h3>
                            <p className="text-success-700 mt-2">{text}</p>
                            <button onClick={handleBackToHome} className="mt-6 bg-primary-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-primary-700 transition-colors">V·ªÅ trang ch·ªß</button>
                        </div>
                    </CardContent>
                </Card>
            )
      }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary-100 to-indigo-200 font-sans">
      <header className="bg-white/80 backdrop-blur-sm shadow-sm sticky top-0 z-10">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-3 flex justify-between items-center">
            <div className="text-center flex-1">
                <h1 className="text-xl font-bold text-primary-700">M·ªói ng√†y ƒë·∫øn tr∆∞·ªùng l√† m·ªôt ni·ªÅm vui</h1>
                <p className="text-sm text-gray-600">Ch√†o bu·ªïi s√°ng, {student.full_name}!</p>
            </div>
            <button
                onClick={logout}
                className="px-4 py-2 text-sm font-medium text-red-600 bg-red-100 rounded-lg hover:bg-red-200 transition-colors"
            >
                ƒêƒÉng xu·∫•t
            </button>
        </div>
      </header>
      
      <main className="max-w-2xl mx-auto p-4 sm:p-6 lg:p-8">
        {renderContent()}
      </main>
    </div>
  );
};

export default StudentDashboard;
